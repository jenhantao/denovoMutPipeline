#! /usr/bin/env python

"""
Takes a mapping from TCGA analysis id to sample barcode
Outputs 3 files with commandlines for 
1) Single sample processing tasks
2) Paired sample processing tasks
3) Cohort processing tasks

Barcode  
"""

import sys

class SampleReader(object):
      
      def __init__(self, filename):
            self.fh = file(filename,'r')

      def __iter__(self):
            return self
      
      def next(self):
            while True:
                  line = self.fh.readline()
                  if line == "":
                        self.fh.close()
                        raise StopIteration
                  line = line[:-1]
                  return Sample(line.split("\t"))

class Sample(object):
      """
      Store sample information
      """
      typeDict = {"01":"Tumor","10":"Normal","50":"Cell-line"}

      def __init__(self, row):
            self.bampath = row[0]
            self.analysisID = row[1]
            self.barcode = row[2]
            self.info = row[3:]
            self.sampleID = "-".join(self.barcode.split("-")[:3])
            self.sampleType = Sample.typeDict.get(self.barcode.split("-")[3][:2])
            if self.sampleType == None:
                  raise Exception("Code " + self.barcode.split("-")[3][:2] + " not yet supported.")

      def __repr__(self):
            return " ".join(["bash","./pipelines/pipe_single.sh", self.bampath, self.sampleID, self.sampleType])

class Pair(object):

      def __init__(self, pair):
            if len(pair) != 2:
                  raise Exception("Ambiguous tumor normal list detected. Currently only pairs supported.")
            self.tumor = [s for s in pair if s.sampleType == "Tumor"][0]
            self.normal = [s for s in pair if s.sampleType == "Normal"][0]
      
      def __repr__(self):
            return " ".join(["bash","./pipelines/pipe_paired.sh", self.tumor.sampleID])


class SampleTbl(object):
      """
      Enable rapid sample lookup
      Track cohort samples and tumor normal pairs
      """
      def __init__(self, filename):
            self.sampleByBarcode = {}
            self.sampleByAnalysisID = {}
            self.sampleByType = {}
            self.pairsByBarcode = {}
            for sample in SampleReader(filename):
                  self.__addSample(sample)
            self.__createPairs()

      def __addSample(self, sample):
            if self.sampleByBarcode.has_key(sample.sampleID):
                  self.sampleByBarcode[sample.sampleID].append(sample)
            else:
                  self.sampleByBarcode[sample.sampleID] = [sample]
            self.sampleByAnalysisID[sample.analysisID] = sample            

      def __createPairs(self):
            for barcode in self.sampleByBarcode.keys():
                  self.pairsByBarcode[barcode] = Pair(self.sampleByBarcode.get(barcode))

      def getSingle(self):
            return self.sampleByAnalysisID.values()

      def getPair(self):
            return self.pairsByBarcode.values()

      def __repr__(self):
            #samples = self.sampleByAnalsysiID.values()
            return " ".join(["bash","./pipelines/pipe_cohort.sh"," ".join(self.sampleByBarcode.keys())])

def main():
    
      sampleinfo = SampleTbl(sys.argv[1])

      outfile1 = file(sys.argv[2] +"/processSingle.sh",'w')
      outfile2 = file(sys.argv[2] +"/processPair.sh",'w')
      outfile3 = file(sys.argv[2] +"/processCohort.sh",'w')
      print >> outfile1, "#! /bin/bash\n"
      print >> outfile2, "#! /bin/bash\n"
      print >> outfile3, "#! /bin/bash\n"

      for analysis in sampleinfo.getSingle():
            print >> outfile1, analysis

      for pair in sampleinfo.getPair():
            print >> outfile2, pair

      print >> outfile3, sampleinfo
      
      outfile1.close()
      outfile2.close()
      outfile3.close()


if __name__ == "__main__":
   main()
